#!/usr/bin/env python
from gwpy.timeseries import TimeSeriesDict
import argparse

parser = argparse.ArgumentParser(description='Make a PDF containing spectra of many channels')
parser.add_argument('-s','--start', type=int, required=True,
                        help='GPS start time.')
parser.add_argument('-d','--duration', type=int, required=True,
                        help='Duration of data to use.')
parser.add_argument('-c', '--channels', type=str, required=True,
                        help='Text file containing list of channels in the '
                            'first column (e.g., the output of FrChannels).')
parser.add_argument('-r','--reference', type=int,
                        help='GPS start time for a reference time.')
parser.add_argument('-f','--frame', type=str,
                        help='Do a datafind for this frame type. If not '
                            'provided, use NDS to get data.')
parser.add_argument('-o','--output', type=str, default='many_channels.pdf',
                        help='Output filename (pdf).')
parser.add_argument('--fftlen', type=float, default=4.,
                        help='Length of FFT (sec), default 4.')
parser.add_argument('--overlap', type=float, default=0.75,
                        help='Fractional overlap of FFT, default 0.75.')

args = parser.parse_args()

st = args.start
et = st+args.duration

channels = []
for line in open(args.channels):
    tmp = line.split()
    if int(tmp[-1]) > 16:
        channels.append(tmp[0])

ifo = channels[0][:2]

print '%u channels faster than 16 Hz' % len(channels,)

if args.frame:
    data_dict = TimeSeriesDict.get(channels, frametype=args.frame,                                start=st, end=et, nproc=4)
else:
    data_dict = TimeSeriesDict.fetch(channels, st, et)
    
if args.reference:
    st1 = args.reference
    et1 = st1 + args.duration
    if args.frame:
        ref_dict = TimeSeriesDict.get(channels, frametype=args.frame,
                                        start=st1, end=et1, nproc=4)
    else:
        ref_dict = TimeSeriesDict.fetch(channels, st1, et1)
else:
    ref_dict = None

from matplotlib import use
use('Agg')
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt

with PdfPages(args.output) as pdf:
    for chan in sorted(channels):
        print "Plotting", chan
        data = data_dict[chan]
        my_asd = data.asd(args.fftlen,args.fftlen*args.overlap)
        if ref_dict:
            ref_asd = ref_dict[chan].asd(args.fftlen,args.fftlen*args.overlap)
        plt.figure()
        plt.title(chan)
        plt.xlabel('Frequency [Hz]')
        plt.xlabel('ASD [Counts/rt(Hz)]')
        plt.loglog(my_asd.frequencies.value, my_asd.value)
        if ref_dict:
            plt.loglog(ref_asd.frequencies.value, ref_asd.value)
        plt.axvline(60.,c='y',ls=':')
        plt.axvline(120.,c='y',ls=':')
        plt.xlim(4., data.sample_rate.value/2.)
        pdf.savefig()
        plt.close()

